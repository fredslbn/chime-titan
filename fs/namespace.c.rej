--- fs/namespace.c
+++ fs/namespace.c
@@ -980,6 +980,16 @@ vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void
 	mnt->mnt.mnt_sb = root->d_sb;
 	mnt->mnt_mountpoint = mnt->mnt.mnt_root;
 	mnt->mnt_parent = mnt;
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	// here we reorder the mounts that are added after copy_mnt_ns();
+	// make sure it is zygote process
+	if (likely(current->android_kabi_reserved3 & 1)) {
+		mnt->mnt.android_kabi_reserved1 = current->android_kabi_reserved4++;
+	}
+	// Seems no need to reorder the mnt group id for mounts after copy_mnt_ns();
+#endif
+
 	lock_mount_hash();
 	list_add_tail(&mnt->mnt_instance, &root->d_sb->s_mounts);
 	unlock_mount_hash();
@@ -1061,6 +1071,22 @@ static struct mount *clone_mnt(struct mount *old, struct dentry *root,
 	mnt->mnt.mnt_root = dget(root);
 	mnt->mnt_mountpoint = mnt->mnt.mnt_root;
 	mnt->mnt_parent = mnt;
+
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	// here we reorder the mounts that are added after copy_mnt_ns();
+	// make sure it is zygote process
+	if (likely(current->android_kabi_reserved3 & 1)) {
+		mnt->mnt.android_kabi_reserved1 = current->android_kabi_reserved4++;
+	}
+	// Seems no need to reorder the mnt group id for mounts after copy_mnt_ns();
+
+	// Make all our sus mounts to be cloned private, so that propagation won't happen when they are being umounted,
+	// and let try_umount() to decide what to umount for matched process.
+	if (unlikely(mnt->mnt.mnt_root->d_inode->i_state & 33554432)) {
+		flag &= (~CL_SLAVE | ~CL_SHARED_TO_SLAVE | ~CL_MAKE_SHARED | CL_PRIVATE);
+	}
+#endif
+
 	lock_mount_hash();
 	list_add_tail(&mnt->mnt_instance, &sb->s_mounts);
 	unlock_mount_hash();
@@ -2958,6 +3014,11 @@ struct mnt_namespace *copy_mnt_ns(unsigned long flags, struct mnt_namespace *ns,
 	struct mount *old;
 	struct mount *new;
 	int copy_flags;
+#ifdef CONFIG_KSU_SUSFS_SUS_MOUNT
+	int first_entry_mnt_id = 0;
+	int first_entry_mnt_master_group_id = 1;
+	int last_mnt_master_group_id = 0;
+#endif
 
 	BUG_ON(!ns);
 
